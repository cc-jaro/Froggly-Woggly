<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite4</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-300</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///display init
//sets variables for display height and width, to read from for setting up other variables
global.screenh = display_get_height();
global.screenw = display_get_width();

//Sets size of the window to be the same dimensions as the screen
window_set_size(global.screenw,global.screenh);

//sets view height and width to screen height and width
view_hview[0] = global.screenh;
view_wview[0] = global.screenw;

//sets view port to screen height and width(shouldn't be needed but is)
view_hport[0] = global.screenh;
view_wport[0] = global.screenw;

//Sets the drawing surface to the new size. Shouldn't be needed but its a failsafe
surface_resize(application_surface, global.screenw, global.screenh); 

//sets GUI layer to the same size as the screen
display_set_gui_size(global.screenw,global.screenh);

//Sets up scaling variables depending on resolution of device
global.scaleh = global.screenh/1080;
global.scalew = global.screenw/1920;

//opens ini to see what scaling should be
ini_open("config.ini");
global.scaling = ini_read_real("configs", "scaling", 1);
ini_close(); 

//scales based on global scaling
global.scale = global.scaleh * global.scaling;
scale = global.scale;

//view setting
if !view_enabled
    {
    view_visible[0] = true;
    view_enabled = true;
    view_object[0] = ofrog;
    view_hborder[0] = view_wview[0] / 2;
    view_vborder[0] = view_hview[0] / 2;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//debug code this must be first
//if Debug = 1, Android = 1
if os_type = os_android
debug = 1;
else
debug = 0;

//control scheme
ctrls = 1

//Middle of joystick init
jsx = 0;
jsy = 0;

//Aiming init 
aimdir = 0

//Joystick use init
joystick = 0;

//Virtual keys init
if debug = 1
{
//vku = virtual_key_add(view_wview-180, view_hview-210, 175, 100, vk_up); 
//vkd = virtual_key_add(view_wview-180, view_hview-105, 175, 100, vk_down); 
vks = virtual_key_add(view_wview-(view_wview-(10*scale)), view_hview-(210*scale), (175*scale), (200*scale), vk_space); 
//vkt = virtual_key_add(view_wview-(view_wview-10), view_hview-105, 175, 100, vk_control); 
vkesc = virtual_key_add(view_wview-(view_wview-10), view_hview-(view_hview-10), 175, 100, ord("M"))
}

//Makes sure room speed is at 60. Shouldn't be needed just in case
if room_speed != 60
room_speed = 60;

steps = 1;
totalfps = 0;
avgfps = 0;
alarm[11] = room_speed/2;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>steps ++;

totalfps += fps_real;

avgfps = totalfps / steps;




alarm[11] = (room_speed/2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scale = global.scale

//joystick stuff

//sets the "real" sizes to correspond with the GUI layer
realwidth = view_xview[0] + global.screenw;
realheight = view_yview[0] + global.screenh;

//since all following is android only...
if debug = 1

{//START OF ANDROID ONLY SECTION

if ctrls = 0 //for if the game uses joystick
{

//Sets the middle of the Joystick, and offsets it by scale
jsmidx = realwidth-(250*scale);
jsmidy = realheight-(160*scale);

//Finds the direction of the Joystick
jsdir = point_direction(jsmidx,jsmidy,mouse_x,mouse_y);
jslen = point_distance(jsmidx,jsmidy,mouse_x,mouse_y);

//Tethers the Joystick at 200 units from the touch pad center
if point_distance(jsmidx,jsmidy,mouse_x,mouse_y) &lt;= (200*scale)
{
jsx = mouse_x;
jsy = mouse_y;
}

if point_distance(jsmidx,jsmidy,mouse_x,mouse_y) &gt; (200*scale)
{
jsx = lengthdir_x((200*scale),jsdir) + jsmidx
jsy = lengthdir_y((200*scale),jsdir) + jsmidy
}

//Simply returnsa a value if the joystick is activated, by reading if the mouse is within the touchpad
if point_in_circle(mouse_x,mouse_y,jsmidx,jsmidy,(150*scale)) &amp;&amp; mouse_check_button(mb_left)
{
joystick = 1    //This doesn't deactivate once the input leaves the touch pad
}

//disables the joystick when the player releases the mouse/input
if !mouse_check_button(mb_left) 
{
joystick = 0
}

//Aims the frog depending on the Joystick angle
if joystick = 1
{
if (point_direction(jsmidx,jsmidy,jsx,jsy) &gt;= min(15,165) &amp;&amp; point_direction(jsmidx,jsmidy,jsx,jsy) &lt;= max(15,165))
aimdir = point_direction(jsmidx,jsmidy,jsx,jsy);
ofrog.aimdir = aimdir;
}
}
}//END OF ANDROID ONLY SECTION





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Init for Draw Settings
draw_set_color(c_black);
draw_set_font(fontmain);
draw_set_circle_precision(64); 

//Draws Credits Text
if debug = 1
{
draw_text(150,99550,"Coding By Jaro #Music By Debussy");
}

if debug != 1
{
draw_text(150,99550,"Click and drag anywhere to jump #Music by Debussy");
}


//set color and alpha for next step
draw_set_colour(c_dkgray);
draw_set_alpha(1);
depth = -1000;

//checks to see if it's android
if debug = 1 &amp;&amp; ctrls = 0
    {
//draws middle joystick part
    if joystick = 1
        { 
        draw_circle(jsx,jsy,50*scale,0);
        draw_line_width(jsx,jsy,realwidth-(250*scale),realheight-(160*scale),8*scale);
        }

//resets middle joystick position
    if joystick = 0
        {
        draw_circle(realwidth-(250*scale),realheight-(160*scale),50*scale,0);
        }
    }
/*
vku = virtual_key_add(view_wview-180, view_hview-210, 175, 100, vk_up); 
vkd = virtual_key_add(view_wview-180, view_hview-105, 175, 100, vk_down); 
vks = virtual_key_add(view_wview-(view_wview-10), view_hview-210, 175, 200, vk_space); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Initialises Draw Settings for this step
draw_set_alpha(1);
draw_set_colour(c_black);

//charge bar top middle
if global.chargebar = 0 or global.chargebar = 2
{
draw_rectangle((global.screenw/2)-(300*scale),(20*scale),(global.screenw/2)+(300*scale),(60*scale),1)
draw_healthbar((global.screenw/2)-(300*scale),(20*scale),(global.screenw/2)+(300*scale),(60*scale),(100/110)*ofrog.jumpcharge,0,c_red,c_yellow,0,0,1)
}

//text top right
if global.leveltype = "mountain"
{
draw_text(global.screenw-230,20,"Height:"+string(ofrog.height)+"m")
draw_text(global.screenw-230,50,"Highest:"+string(ofrog.maxheight)+"m")
}

//Debug text Left of Screen
draw_set_font(fpsfont);
draw_set_halign(fa_left);
draw_text(30,120,"Fps:"+string(fps))
draw_text(30,140,"Steps:"+string(avgfps))
draw_text(30,160,ofrog.aiming)
draw_text(30,180,ofrog.savex)
draw_text(30,200,ofrog.savey)
draw_text(30,220,ofrog.aimdir)

//Sets Alpha and Draws Joystick Circle
draw_set_alpha(0.5);
if debug = 1 &amp;&amp; ctrls != 1
{
draw_circle(global.screenw-(250*scale),global.screenh-(160*scale),(150*scale),0);
}

//Debug = android, these show virtual keys. Commented out ones are obsolete.
if debug = 1 &amp;&amp; ctrls = 0
{
//virtual_key_show(vku);
//virtual_key_show(vkd);
virtual_key_show(vks);
//virtual_key_show(vkt);
virtual_key_show(vkesc);
}

//draw power button 2
//vks = virtual_key_add(view_wview-(view_wview-(10*scale)), view_hview-(210*scale), (175*scale), (200*scale), vk_space); 
draw_set_alpha(0.8);
//draw_rectangle(view_wview-(view_wview-(10*scale)), view_hview-(210*scale), view_wview-(175*scale), view_hview- (200*scale),0)

















draw_set_alpha(1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="79">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = room1
room_goto(level1_1);

if room = level1_1
room_goto(room1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Music Toggle in game
//Toggles music on
if global.music = 0
{
global.music = 1;
ini_open("config.ini");
ini_write_real("configs", "music", 1); //Writes preference to ini for next time
ini_close(); 
    if !audio_is_playing(clair_de_lune) //Make sure audio is not playing, Just in case
    {
        audio_play_sound(clair_de_lune,0,1);
    }
exit //closes event before it sees that now music is on, it must turn off
}

//turns music off and saves it to the ini for next time
if global.music = 1
{
global.music = 0;
ini_open("config.ini");
ini_write_real("configs", "music", 0);
ini_close(); 
audio_stop_sound(clair_de_lune);
exit
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hides Android Virtual KEys
if debug != 1
{
debug = 1

    {
    vku = virtual_key_add(view_wview-180, view_hview-210, 175, 100, vk_up); 
    vkd = virtual_key_add(view_wview-180, view_hview-105, 175, 100, vk_down); 
    vks = virtual_key_add(view_wview-(view_wview-10), view_hview-210, 175, 100, vk_space); 
    //vkt = virtual_key_add(view_wview-(view_wview-10), view_hview-105, 175, 100, vk_control); 
    vkesc = virtual_key_add(view_wview-(view_wview-10), view_hview-(view_hview-10), 175, 100, vk_escape)
    }
}

if debug != 0
{
debug = 0
    {
    virtual_key_delete(vku)
    virtual_key_delete(vkd)
    virtual_key_delete(vks)
   // virtual_key_delete(vkt)
    virtual_key_delete(vkesc)
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//global.scale -= 0.1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Scales game up and resets spacebar Virtual Key
//global.scale += 0.1
//virtual_key_delete(vks);
//vks = virtual_key_add(view_wview-(view_wview-(10*scale)), view_hview-(210*scale), (175*scale), (200*scale), vk_space); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>332</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

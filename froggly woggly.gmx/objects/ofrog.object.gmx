<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sfrog2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///instance activation
instance_activate_all();
instance_deactivate_all(true);
instance_activate_region(x-(global.screenw/2),y-(global.screenh/2),global.screenw*1.5,global.screenh*1.5,true);
instance_activate_object(control);
instance_activate_object(osolidm);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variable Init
//initialise gravity. DEFAULT = 0.75
grav = 0.75;
ctrls = 1
hasjumped = 0;
dead = 0;
pause = 0;


//init basic movement variables. hsp, vsp, jumpcharge and grounded
hsp = 0;
vsp = 0;
jumpcharge = 0;
grounded = 0;
groundedm = 0;
aiming = 0;
timer = 0;
milisecs = 0;
secs = 0;

//init basic aiming variables. ensure Charge is 0.75, and aimmod and chargemod is 1
charge = 0.75;
aimdir = 0
aimmod = 1;
chargemod = 1;

savex = 0;
savey = 0;
aiming = 0;

//creates control object just in case there isn't one
if !instance_exists(control)
instance_create(0,0,control)

//init the jumping variables
jumptimer = 0;
jpower = 0;
jbonus = 0;

//init the score variables and read from the ini what the max height is and whether frog has won before
height = 0;
ini_open("config.ini");
maxheight = ini_read_real("scores", "maxheight", 0);
victory = ini_read_real("scores", "victory", 0);
ini_close(); 

//things like attempts and so on
global.attempts = 0;
active = 1;

drawcirc = 0;
circalpha = 0;

hhsp = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main frog Step
// if pause != 0 exit;

if instance_exists(osolidm)
instance_activate_object(osolidm);

//init key presses and variables for interactions
key_jump = keyboard_check(vk_space) ;//or mouse_check_button(mb_left)
key_up = keyboard_check(vk_up);
key_down = -keyboard_check(vk_down);
key_left = -keyboard_check_pressed(vk_left);
key_right = keyboard_check_pressed(vk_right);
key_turn = keyboard_check_pressed(vk_control);
mleft = mouse_check_button(mb_left);
mleftp = mouse_check_button_pressed(mb_left);
mleftr = mouse_check_button_released(mb_left);

keyturn = key_turn;
keyaim = key_up + key_down ;


//checks if frog is on the ground and sets the grounded variable accordingly
if (place_meeting(x,y+1,osolid)) or (place_meeting(x,y+1,osolidm))
{
grounded = 1;
}
else
{
grounded = 0
}




//height
if grounded = 1
    {
    height = round(((room_height-112) - self.y)/48)
    }

if height &gt; maxheight
    {
    maxheight = height
    ini_open("config.ini");
    ini_write_real("scores", "maxheight", maxheight);
    ini_close(); 
    }

//victory memes
if place_meeting(x,y,oflag) &amp;&amp; victory = 0
    {
    oflag.alarm[0] = 240
    ini_open("config.ini");
    ini_write_real("scores", "victory", 1);
    ini_close();
    }
    
 //new control scheme 
 //this is the click and drag section
if ctrls = 1
    {
    if mleftp = 1 &amp;&amp; grounded = 1
        {
        savex = mouse_x;
        savey = mouse_y;
        aiming = 1;
        }
    }

if aiming = 1
    {
    savex += hsp
    savey += vsp
    }
    


//timing code
if hasjumped = 1 &amp;&amp; active = 1
timer ++;

//milisecs = timer div 6;
secs = timer div 60;

//falling down a pit
if y &gt; (room_height+100) or place_meeting(x,y,ospike)
    { //reset code. This should work for any deaths
    hsp = 0;
    vsp = 0;
    global.attempts ++;
    x = control.frogspawnx;
    y = control.frogspawny;
    }


//stops frog from moveing on collision with flag   
if active = 0
    {
    hsp = 0
    }

//enemy death
if place_meeting(x,y,oenemy)
    {//reset code. This should work for any deaths
    hsp = 0;
    vsp = 0;
    global.attempts ++;
   x = control.frogspawnx;
  y = control.frogspawny;
    }

    
//squishy death    
if (place_meeting(x+1,y,osolid) &amp; place_meeting(x-1,y,osolid)) 
    {//reset code. This should work for any deaths
    hsp = 0;
    vsp = 0;
    global.attempts ++;
    x = control.frogspawnx;
    y = control.frogspawny;
    }
    
    
image_index = grounded

//runs collision script (must be at end)
//if grounded = 0  or vsp != 0 or hsp != 0
//    {scrfrog_movement() };
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///jumping

//Jpower calculation
jpower = (jumpcharge/5.5) + (jumpcharge*0.075)

//Fully clamps the aim system 
clamp(aimdir,15,165);

//Sets the image xscale (horizontal flip) depending on the direction the frog is pointing.
if (aimdir &gt;= min(15,90) &amp;&amp; aimdir &lt;= max(15,90))
{
image_xscale = 1;
}

if (aimdir &gt;= min(90.1,165) &amp;&amp; aimdir &lt;= max(90.1,165))
{
image_xscale = -1;
}

//jumptimer
if jumptimer &gt; 0
jumptimer --;

    
//setting and controlling aiming with click and drag  
//this code is for keeping the aiming correct. There's probably a faster easier way to do it but tbh this is ok for me
if aiming = 1  &amp;&amp; active = 1
{

    if point_direction(mouse_x,mouse_y,savex,savey) &gt; 165 or point_direction(mouse_x,mouse_y,savex,savey) &lt; 270
    {
        aimdir = 165
    }
    if point_direction(mouse_x,mouse_y,savex,savey) &lt; 15 or point_direction(mouse_x,mouse_y,savex,savey) &gt; 270
    {
        aimdir = 15
    }
  
    if point_direction(mouse_x,mouse_y,savex,savey) &lt;= 165 &amp;&amp; point_direction(mouse_x,mouse_y,savex,savey) &gt;= 15
    {
        aimdir = point_direction(mouse_x,mouse_y,savex,savey)
    }  
}    


//aiming with click and drag
if aiming = 1 &amp;&amp; active = 1
    {
    jumpcharge = point_distance(mouse_x,mouse_y,savex,savey)/5
    }

//jumping code for click and drag
if jumpcharge &gt; 0 &amp;&amp; mleft = 0 &amp;&amp; active = 1
{
    if grounded = 1 //ensures the frog is on the ground for jumping
    {
    grounded = 0
    if !place_meeting(x+(lengthdir_x(jpower,aimdir)),y,osolid)
        {
        hsp += (lengthdir_x(jpower,aimdir))
        }
        
    if place_meeting(x+(lengthdir_x(jpower,aimdir)),y,osolid)
        {
        hsp = -((lengthdir_x(jpower,aimdir))/2)  
        }
    
         
        
        
        
    if !place_meeting(x,y+(lengthdir_y(jpower,aimdir)),osolid)
        {
        vsp += (lengthdir_y(jpower,aimdir))
        }
    if hasjumped = 0
    hasjumped = 1;
    aiming = 0;
    jumpcharge = 0;
    grounded = 0
    }
}

//caps jumpcharge
if jumpcharge &gt; 110
jumpcharge = 110;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///secondary memes
instance_activate_region(x-(global.screenw/1.5),y-(global.screenh/1.5),global.screenw*1.5,global.screenh*1.5,true);
nearestmove = instance_nearest(x,y,osolidm)


if keyboard_check_pressed(vk_space)
    {
    if pause == 1 
        {
        pause = 0; 
        exit
        }
    }
    
    {
    if pause == 0
        {
        pause = 1; 
        exit
        }
    }


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collision 2
var fricmod = (1 * (abs(hsp)/4));
var vfric = (2 / fricmod) + (abs(vsp)/10);

//falling code
if (vsp &lt; 36)
 vsp += grav;

// Limits fall speed
if vsp &gt; 36
vsp = 36;

//horizontal collision
if (place_meeting(x+hsp,y,osolid))
{
    while (!place_meeting(x+sign(hsp),y,osolid)) 
    {
    x += sign(hsp);
    }
if abs(hsp) &gt; 10
hsp *= ((0.5)*-1);

}    

var instnmh = (instance_nearest(x,y,osolidm).hsp)*sign(instance_nearest(x,y,osolidm).hsp);



//horizontal collision moving
if (place_meeting((x+hsp)+(instnmh),y,osolidm)) //&amp;&amp; !(place_meeting(x,y+1,osolid))
{
    while (!place_meeting(x+(sign(hsp)),y,osolidm)) 
    {
    x += sign(hsp);
    }
hsp *= ((0.5) * -1);
}    

var instmh = instance_nearest(x,y,osolidm)    
    
if place_meeting(x-7,y,osolidm) or place_meeting(x+7,y,osolidm)
{
if abs(hsp) &lt; abs(instmh.hsp)
    {
        {
        hsp += instmh.hsp
        }
    }
}    
//Vertical Collision
if (place_meeting(x,y+vsp,osolid))
{
    while (!place_meeting(x,y+sign(vsp),osolid))
    {
    audio_play_sound(choose(slap1,slap2,slap3),1,0)
    y += sign(vsp);
    jumptimer = 30   
    }
vsp = 0;
}

//Vertical Collision moving
if (place_meeting(x,y+vsp,osolidm)) &amp;&amp; !(place_meeting(x,y+1,osolid))
{
    {
    while (!place_meeting(x,y+sign(vsp),osolidm))
    {
    audio_play_sound(choose(slap1,slap2,slap3),1,0)
    y += sign(vsp);
    jumptimer = 30   
    }

if vsp &gt;= 0
{
    grounded = 1
    if hsp != instance_nearest(x,y,osolidm).hsp
        {
        hsp = instance_nearest(x,y,osolidm).hsp
        }
    }
    vfric = 0
    vsp = 0;
}
}
//very inelegant solution for block stuck bug. Get stuck inside a block end up here. No idea how to fix
if grounded = 1 &amp;&amp; place_meeting(x,y,osolid)
{ 
    y-=6
}


//friction code
if grounded = 1 
{
    
    
    if abs(hsp) &gt; vfric
        {
        hsp -= (vfric*sign(hsp))
        }
    if abs(hsp) &lt;= vfric &amp;&amp; vsp = 0
        {
        hsp = 0
        }  
    //hsp = 0;
    //vsp = 0;
}

//keeps frog within room
if x &gt; room_width or x &lt; 0
    {
    hsp *= -1
    }
    



// calculation for hsp and vsp. Nice meme
x += round(hsp);
y += round(vsp);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//init draw settings for this part
draw_set_alpha(1);

//draws myself (the frog) and changes image index 
draw_self();
image_speed = 0; // image speed needs to be 0

image_index = 0;


//victory;
/*
//draw settings for next part
draw_set_alpha(0.8);
draw_set_colour(c_yellow);

//Draws the aiming line
if control.ctrls !=1
{
//draw_line_width(self.x,self.y,x+(lengthdir_x(300,aimdir)),y+(lengthdir_y(300,aimdir)),4);
}

//checks to see if it should draw the old style charge bar and if it should, it will.
if global.chargebar &gt;= 1 &amp;&amp; ctrls != 1
{
draw_set_colour(c_red);
//draw_line_width(self.x,self.y,x+(lengthdir_x(jumpcharge,aimdir)),y+lengthdir_y(jumpcharge,aimdir),8)
}

if aiming = 1 &amp;&amp; ctrls = 1
{
draw_set_colour(c_black);
//draw_line_width(savex,savey,mouse_x,mouse_y,(jumpcharge/10));

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if aiming = 1
    {
    window_set_cursor(cr_cross);
    draw_sprite_ext(sprite20,0,savex,savey,1,1,0,c_ltgray,0.8);
    draw_set_alpha(0.6)
    draw_throw_arc_width2(x,y,(lengthdir_x(jpower,aimdir)),(lengthdir_y(jpower,aimdir)),0.75,0.5,osolid,5);
    }   

draw_set_alpha(1)

if aiming = 0
{
drawcirc = 0;
window_set_cursor(cr_default);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set alpha and colour to default
//draw_set_colour(c_black);
//draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite0</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variable Init
//initialise gravity. DEFAULT = 0.75
grav = 0.75;
ctrls = 1
hasjumped = 0;
//init basic movement variables. hsp, vsp, jumpcharge and grounded
hsp = 0;
vsp = 0;
jumpcharge = 0;
grounded = 0;
aiming = 0;
timer = 0;
milisecs = 0;
secs = 0;

//init basic aiming variables. ensure Charge is 0.75, and aimmod and chargemod is 1
charge = 0.75;
aimdir = 0
aimmod = 1;
chargemod = 1;

savex = 0;
savey = 0;
aiming = 0;

//creates control object just in case there isn't one
if !instance_exists(control)
instance_create(0,0,control)

//init the jumping variables
jumptimer = 0;
jpower = 0;
jbonus = 0;

//init the score variables and read from the ini what the max height is and whether frog has won before
height = 0;
ini_open("config.ini");
maxheight = ini_read_real("scores", "maxheight", 0);
victory = ini_read_real("scores", "victory", 0);
ini_close(); 

//things like attempts and so on
global.attempts = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main frog Step
//init key presses and variables for interactions
key_jump = keyboard_check(vk_space) ;//or mouse_check_button(mb_left)
key_up = keyboard_check(vk_up);
key_down = -keyboard_check(vk_down);
key_left = -keyboard_check_pressed(vk_left);
key_right = keyboard_check_pressed(vk_right);
key_turn = keyboard_check_pressed(vk_control);
mleft = mouse_check_button(mb_left);
mleftp = mouse_check_button_pressed(mb_left);
mleftr = mouse_check_button_released(mb_left);

keyturn = key_turn;
keyaim = key_up + key_down ;
//ctrls = 1

//Sets up canaim. Mostly a useless feature thats obsolete but it has references so I can't delete it
if (key_jump = 1 or key_jump = 0)
canaim = 1;

//falling code
if (vsp &lt; 36)
 vsp += grav;

// Limits fall speed
if vsp &gt; 36
vsp = 36;

//Vertical Collision
if (place_meeting(x,y+vsp,osolid))
{
    while (!place_meeting(x,y+sign(vsp),osolid))
    {
    audio_play_sound(choose(slap1,slap2,slap3),1,0)
    y += sign(vsp);
    jumptimer = 30   
    }
vsp = 0;
}

//horizontal collision
if (place_meeting(x+hsp,y,osolid))
{
    while (!place_meeting(x+sign(hsp),y,osolid))
    {
    x += sign(hsp);
    }
hsp *= ((0.6666)*-1);
}

// calculation for hsp and vsp. Nice meme
x += hsp;
y += vsp;

//checks if frog is on the ground and sets the grounded variable accordingly
if (place_meeting(x,y+1,osolid))
{
grounded = 1;
}

//And vice versa, sets the frog to not grounded if he isn't
if (!place_meeting(x,y+1,osolid))
grounded = 0;

//Just makes sure the frog cant move if he's on the ground. It doesnt work properly.
if grounded = 1
{
hsp = 0;
vsp = 0;
}

//very inelegant solution for block stuck bug. Get stuck inside a block end up here. No idea how to fix
if grounded = 1 &amp;&amp; place_meeting(x,y,osolid)
{ 
y-=6
}

//The jumping code
if key_jump = 1 &amp;&amp; ctrls != 1
jumpcharge += ((charge) + (jumpcharge/18))*chargemod; //This is the meat of the jumping code, charging up the jump

//begins the process of jumping
if jumpcharge &gt; 0 &amp;&amp; key_jump = 0 &amp;&amp; ctrls != 1
{
    if grounded = 1 //ensures the frog is on the ground for jumping
    {
    hsp = (lengthdir_x(jpower,aimdir))
    vsp = lengthdir_y(jpower,aimdir)
        
        if hasjumped = 0
        hasjumped = 1;
    
        if jumptimer &gt; 0 // makes star if the frog jumps nicely
        instance_create(x,y,ostar);
        
        if jbonus !=0// makes star if the frog jumps nicely
        instance_create(x,y,ostar);
    }
//resets all the variables used for the jumping
jumpcharge = 0; 
charge = 1;
jumptimer = 0;
}

//Jpower calculation
jpower = (jumpcharge/5.5) + (jumpcharge*0.075)

//gives the frog a boost when jumping with full charge. May remove for consistency
//if key_jump = 0 &amp;&amp; grounded = 1 &amp;&amp; jumpcharge &gt; 50
//jbonus = jpower/10;

//calculates the jump power accurately
//jpower = (jumpcharge/4)+  jbonus;

//charge stuff. these 2 lines allow the charge to reverse itself at full or empty.
if jumpcharge &gt; 110
chargemod = -1;

if jumpcharge &lt; 2
chargemod = 1;

//aiming, using buttons. Includes clamping
if keyaim != 0 &amp;&amp; (aimdir &gt;= min(15,90) &amp;&amp; aimdir &lt;= max(15,90))
aimdir += 1 * keyaim;

if keyaim != 0 &amp;&amp; (aimdir &gt;= min(90.1,165) &amp;&amp; aimdir &lt;= max(90.1,165))
aimdir -= 1 * keyaim;

//Fully clamps the aim system just incase something goes wrong previously
if aimdir &lt; 15
aimdir = 15;

if aimdir &gt; 165
aimdir = 165;

//aiming for non android versions of the game. 
if (mleft = 1 ) &amp;&amp; control.debug = 0 &amp;&amp; ctrls != 1
{
        aimmod = sign(mouse_x-x);
        if (point_direction(x,y,mouse_x,mouse_y) &gt;= min(15,165) &amp;&amp; point_direction(x,y,mouse_x,mouse_y) &lt;= max(15,165))
        aimdir = point_direction(x,y,mouse_x,mouse_y);
}


//obsolete turning code. Leaving in in case I need to refactor it in the future
if keyturn !=0
{
if (aimdir &gt;= min(15,90) &amp;&amp; aimdir &lt;= max(15,90))
aimdir = 135;

if (aimdir &gt;= min(91,165) &amp;&amp; aimdir &lt;= max(91,165))
aimdir = 45;
}

//Sets the image xscale (horizontal flip) depending on the direction the frog is pointing.
if (aimdir &gt;= min(15,90) &amp;&amp; aimdir &lt;= max(15,90))
{
image_xscale = 1;
}

if (aimdir &gt;= min(90.1,165) &amp;&amp; aimdir &lt;= max(90.1,165))
{
image_xscale = -1;
}

//jumptimer
if jumptimer &gt; 0
jumptimer --;

//height
if grounded = 1
{
height = round(((room_height-112) - self.y)/48)
}
if height &gt; maxheight
    {
    maxheight = height
    ini_open("config.ini");
    ini_write_real("scores", "maxheight", maxheight);
    ini_close(); 
    }

//victory memes
if place_meeting(x,y,oflag) &amp;&amp; victory = 0
    {
    oflag.alarm[0] = 240
    ini_open("config.ini");
    ini_write_real("scores", "victory", 1);
    ini_close();
    }
 //new control scheme 
 //this is the click and drag section
if ctrls = 1
    {
    if mleftp = 1 &amp;&amp; grounded = 1
        {
        savex = mouse_x;
        savey = mouse_y;
        aiming = 1;
        }
    }

 //setting and controlling aiming with click and drag  
if aiming = 1 
{  
    if point_direction(mouse_x,mouse_y,savex,savey) &gt; 165 or point_direction(mouse_x,mouse_y,savex,savey) &lt; 270
    {
        aimdir = 165
    }
    if point_direction(mouse_x,mouse_y,savex,savey) &lt; 15 or point_direction(mouse_x,mouse_y,savex,savey) &gt; 270
    {
        aimdir = 15
    }
    if point_direction(mouse_x,mouse_y,savex,savey) &lt; 165 &amp;&amp; point_direction(mouse_x,mouse_y,savex,savey) &gt; 15
    {
        aimdir = point_direction(mouse_x,mouse_y,savex,savey)
    }
}    
//aiming with click and drag
if aiming = 1
    {
    jumpcharge = point_distance(mouse_x,mouse_y,savex,savey)/5
    }

//jumping code for click and drag
if jumpcharge &gt; 0 &amp;&amp; mleft = 0
{
    if grounded = 1 //ensures the frog is on the ground for jumping
    {
    hsp = round(lengthdir_x(jpower,aimdir))
    vsp = round(lengthdir_y(jpower,aimdir))
    if hasjumped = 0
    hasjumped = 1;
    aiming = 0;
    jumpcharge = 0;
    }
}

//caps jumpcharge
if jumpcharge &gt; 110
jumpcharge = 110;

//timing code
if hasjumped = 1
timer ++;

//milisecs = timer div 6;
secs = timer div 60;

//falling down a pit
if y &gt; (room_height+100)
    { //reset code. This should work for any deaths
    hsp = 0;
    vsp = 0;
    global.attempts ++;
    x = control.frogspawnx;
    y = control.frogspawny;
    }

//keeps frog within room
if x &gt; room_width or x &lt; 0
    {
    hsp *= -1
    }
    
//spike death
if place_meeting(x,y,ospike)
    {//reset code. This should work for any deaths
    hsp = 0;
    vsp = 0;
    global.attempts ++;
    x = control.frogspawnx;
    y = control.frogspawny;
    }
    
    
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//init draw settings for this part
draw_set_alpha(1);

//draws myself (the frog) and changes image index 
draw_self();
image_speed = 0; // image speed needs to be 0

image_index = 0;


//victory;

//draw settings for next part
draw_set_alpha(0.8);
draw_set_colour(c_yellow);

//Draws the aiming line
if control.ctrls !=1
{
draw_line_width(self.x,self.y,x+(lengthdir_x(300,aimdir)),y+(lengthdir_y(300,aimdir)),4);
}

//checks to see if it should draw the old style charge bar and if it should, it will.
if global.chargebar &gt;= 1 &amp;&amp; ctrls != 1
{
draw_set_colour(c_red);
draw_line_width(self.x,self.y,x+(lengthdir_x(jumpcharge,aimdir)),y+lengthdir_y(jumpcharge,aimdir),8)
}

if aiming = 1 &amp;&amp; ctrls = 1
{
draw_set_colour(c_black);
draw_line_width(savex,savey,mouse_x,mouse_y,(jumpcharge/10));

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
